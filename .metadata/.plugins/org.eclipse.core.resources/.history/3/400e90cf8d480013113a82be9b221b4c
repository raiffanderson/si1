package TDD;

import static org.junit.Assert.*;
import junit.framework.Assert;

import org.junit.Before;
import org.junit.Test;


public class TestConverteNumeros {
	
	
	String[]listaUmADezenove= {"space","um", "dois", "tres","quatro","cinco","seis","sete","oito","nove","dez","onze","doze","treze","quatorze","quinze","dezesseis","dezessete","dezoito","dezenove"};
	String[]lista21A99Pulando9PorExtenso= {"vinte e um","trinta", "trinta e nove", "quarenta e oito","cinquenta e sete","sessenta e seis","setenta e cinco","oitenta e quatro","noventa e tres"};
	String[]lista21A99Pulando9 = {"21" , "30", "39", "48", "57", "66","75","84","93"};
	String[]lista101A999Pulando253 ={"101","354","607","860"};
	String[]lista101A999Pulando253PorExtenso = {"cento e um","trezentos e cinquenta e quatro","seiscentos e sete","oitocentos e sessenta"};
	String[]lista1000A1200Pulando57 = {"1000","1057","1114","1171"};
	String[]lista1000A1200Pulando57PorExtenso = {"mil","mil e cinquenta e sete","mil cento e quatorze","mil cento e setenta e um"};
	
	@Before
	public void setUp() {}
		String testeDeEntrada;
		
		
	@Test
	public void TestaDevolveNumeroPorExtenso(){
		/* 1º caso */
		for (int num = 1; num < 20; num++){
			 Assert.assertEquals(ConverteNumeros.devolveNumeroPorExtenso(Integer.toString(num)), listaUmADezenove[num]);
			 /* varre alguns de 0 a 19 para conferir se todos estão cobertos*/
		} 
		
		for (int num = 0; num < lista21A99Pulando9.length; num++  ){
			 Assert.assertEquals( lista21A99Pulando9PorExtenso[num],ConverteNumeros.devolveNumeroPorExtenso(lista21A99Pulando9[num]));
			 /* varre alguns números de 21 a 99 para conferir se todos estão cobertos*/
		} 
		
		for (int num = 0; num < lista101A999Pulando253.length; num++  ){
			 Assert.assertEquals( lista101A999Pulando253PorExtenso[num],ConverteNumeros.devolveNumeroPorExtenso(lista101A999Pulando253[num]));
			 /* varre alguns números de 101 a 999 para conferir se todos estão cobertos*/
		}
		
		for (int num = 0; num < lista1000A1200Pulando57.length; num++  ){
			 Assert.assertEquals( lista1000A1200Pulando57PorExtenso[num],ConverteNumeros.devolveNumeroPorExtenso(lista1000A1200Pulando57[num]));
			 /* varre alguns números de 1000 a 1200 para conferir se todos estão cobertos*/
		}
		
		/*garante os casos excepcionais, o zero e o cem*/
		 Assert.assertEquals("zero", ConverteNumeros.devolveNumeroPorExtenso("0"));
		 Assert.assertEquals("cem", ConverteNumeros.devolveNumeroPorExtenso("100"));
		 
		 
		
	}
	
	public void  TestEntradaValida(){
		
		/* garante que não aceita string vazia na entrada */
		testeDeEntrada = "";
		Assert.assertFalse(ConverteNumeros.EntradaEhValida(testeDeEntrada));
		
		/*garante que não aceita palavras*/
		testeDeEntrada = "casa";
		Assert.assertFalse(ConverteNumeros.EntradaEhValida(testeDeEntrada));
	}
}
